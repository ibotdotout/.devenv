" use vim, not vi api
set nocompatible

" support screen-256color
set t_Co=256

" yank to clipboard
" set clipboard=unnamed

" no backup files
"set nobackup

" no write backup
"set nowritebackup

" no swap file
set noswapfile

" show a visual line under the cursor's current line.
set cursorline


"Mapp jk to <ESC>
inoremap jk <ESC>
inoremap kj <ESC>

"About Search
set incsearch
set hlsearch

"Syntax Color
syntax on

"Show line number
set nu

"Automatically indent
set smartindent

"About Tab
set smarttab

"Use UTF-8.
set encoding=utf8

"Disable arrow key
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" use motion work with display line
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
nnoremap $ g$
nnoremap ^ g^
nnoremap 0 g0

"move between windows
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

"Mute Highlighting
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" set enable spelling check
au FileType tex set spell spelllang=en_us
au FileType liquid set spell spelllang=en_us

" set PEP8
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" run autoPEP8
set autoread
au BufWritePost *.py silent call AutoPEP8()
" nnoremap <leader>pp :call AutoPEP8()<CR>
function AutoPEP8()
    silent execute '!autopep8 --in-place --aggressive --aggressive '.expand("%")
endfunction

" vimdiff function
set diffexpr=MyDiff()
function MyDiff()
    silent execute "!python /Users/botbotbot/develop/video-au10/utils/my_diff.py " . v:fname_in . " " . v:fname_new . " > " . v:fname_out
endfunction

" pdflatex function
" au BufWritePost *.tex silent call RunPdfLaTex()
nnoremap <leader>ll :call RunPdfLaTex()<CR>
nnoremap <leader>lp :call CompilePdfLaTex()<CR>
nnoremap <leader>l; :call RunPdfLaTexBibTex()<CR>
nnoremap <leader>lo :call OpenPdfLaTex()<CR>
nnoremap <leader>lk :call OpenPdfLaTexLog()<CR>

" nose pdb function
nnoremap <leader>dd :call NosePdb()<CR><CR>

function OpenPdfLaTexLog()
    silent execute "rightbelow split %:p:r.log"
    redraw!
endfunction

function OpenPdfLaTex()
    silent execute "silent !open %:p:r.pdf  &"
    redraw!
endfunction

function CompilePdfLaTex()
    let latex = system("pdflatex ".expand("%"))
    if v:shell_error
      echom "pdflatex compile failed"
    else
      echom "pdflatex compiled"
    endif
endfunction

function CompileBibTex()
    let latex = system("bibtex ".expand("%:r"))
    if v:shell_error
      echom "bibtex compile failed"
    else
      echom "bibtex compiled"
    endif
endfunction

function RunPdfLaTex()
    call CompilePdfLaTex() "pdf
    if !v:shell_error
      call OpenPdfLaTex() "open
    endif
endfunction

function RunPdfLaTexBibTex()
  call CompilePdfLaTex() "pdf
  if !v:shell_error
    call CompileBibTex() "bib
    if !v:shell_error
      call CompilePdfLaTex() "pdf
      if !v:shell_error
        call CompilePdfLaTex() "pdf
        if !v:shell_error
          call OpenPdfLaTex() "open
        endif
      endif
    endif
  endif
endfunction


function NosePdb()
  normal ofrom nose.tools import set_trace; set_trace()
endfunction
